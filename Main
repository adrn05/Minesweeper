import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new StartMenu());
    }
}

class ScoreEntry implements Serializable {
    private final String name;
    private final int time;

    public ScoreEntry(String name, int time) {
        this.name = name;
        this.time = time;
    }

    public String getName() {
        return name;
    }

    public int getTime() {
        return time;
    }
}

class StartMenu extends JFrame {
    private static final String SCOREBOARD_FILE = "scoreboard.ser";
    private static final int MAX_SCORES = 10;
    private final ArrayList<ScoreEntry> scoreboard;

    // Spieloptionen
    private int gridSize = 10; // Standardgröße
    private int numMines = 15; // Standardanzahl Minen

    public StartMenu() {
        setTitle("Minesweeper");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JLabel titleLabel = new JLabel("Minesweeper", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 32));
        add(titleLabel, BorderLayout.NORTH);

        JButton startButton = new JButton("Start Game");
        startButton.setFont(new Font("Arial", Font.BOLD, 24));
        startButton.addActionListener(e -> {
            dispose();
            new Minesweeper(loadScoreboard(), gridSize, numMines, "Normal");
        });

        JButton settingsButton = new JButton("Settings");
        settingsButton.setFont(new Font("Arial", Font.BOLD, 24));
        settingsButton.addActionListener(e -> showSettingsDialog());

        JButton scoreboardButton = new JButton("Scoreboard");
        scoreboardButton.setFont(new Font("Arial", Font.BOLD, 24));
        scoreboardButton.addActionListener(e -> showScoreboard());

        JButton resetButton = new JButton("Reset Scoreboard");
        resetButton.setFont(new Font("Arial", Font.BOLD, 24));
        resetButton.addActionListener(e -> resetScoreboard());

        JButton quitButton = new JButton("Quit");
        quitButton.setFont(new Font("Arial", Font.BOLD, 24));
        quitButton.addActionListener(e -> System.exit(0));

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(5, 1, 10, 10));
        buttonPanel.add(startButton);
        buttonPanel.add(settingsButton);
        buttonPanel.add(scoreboardButton);
        buttonPanel.add(resetButton);
        buttonPanel.add(quitButton);

        add(buttonPanel, BorderLayout.CENTER);

        scoreboard = loadScoreboard();

        setSize(400, 400);
        setLocationRelativeTo(null);
        setVisible(true);


    }

    private void showScoreboard() {
        StringBuilder sb = new StringBuilder("Top 10 Scores:\n\n");
        for (int i = 0; i < scoreboard.size(); i++) {
            ScoreEntry entry = scoreboard.get(i);
            sb.append((i + 1)).append(". ").append(entry.getName()).append(" - ").append(entry.getTime()).append(" seconds\n");
        }
        JOptionPane.showMessageDialog(this, sb.toString(), "Scoreboard", JOptionPane.INFORMATION_MESSAGE);
    }

    private ArrayList<ScoreEntry> loadScoreboard() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(SCOREBOARD_FILE))) {
            return (ArrayList<ScoreEntry>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            return new ArrayList<>();
        }
    }

    public static void saveScoreboard(ArrayList<ScoreEntry> scoreboard) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(SCOREBOARD_FILE))) {
            oos.writeObject(scoreboard);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void addScore(ArrayList<ScoreEntry> scoreboard, String name, int time) {
        scoreboard.add(new ScoreEntry(name, time));
        scoreboard.sort(Comparator.comparingInt(ScoreEntry::getTime));
        while (scoreboard.size() > MAX_SCORES) {
            scoreboard.remove(scoreboard.size() - 1);
        }
        saveScoreboard(scoreboard);
    }

    private void resetScoreboard() {
        String password = JOptionPane.showInputDialog(this, "Please enter password to reset the scoreboard:");
        if ("Sw33p3r".equals(password)) {
            scoreboard.clear();
            saveScoreboard(scoreboard);
            JOptionPane.showMessageDialog(this, "Scoreboard has been reset.");
        } else {
            JOptionPane.showMessageDialog(this, "Wrong password!");
        }
    }

    private void showSettingsDialog() {
        String[] difficultyOptions = {"Easy", "Normal", "Hard", "Custom"};
        int choice = JOptionPane.showOptionDialog(this, "Select difficulty level:", "Settings", JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, difficultyOptions, difficultyOptions[1]);

        String difficulty = "Normal";
        switch (choice) {
            case 0: // Easy
                gridSize = 8;
                numMines = 10;
                difficulty = "Easy";
                break;
            case 1: // Normal
                gridSize = 10;
                numMines = 15;
                difficulty = "Normal";
                break;
            case 2: // Hard
                gridSize = 15;
                numMines = 40;
                difficulty = "Hard";
                break;
            case 3: // Custom
                String gridSizeInput = JOptionPane.showInputDialog(this, "Enter grid size (min: 5, max: 20):", gridSize);
                String numMinesInput = JOptionPane.showInputDialog(this, "Enter number of mines (min: 1):", numMines);

                try {
                    int customGridSize = Integer.parseInt(gridSizeInput);
                    int customNumMines = Integer.parseInt(numMinesInput);

                    if (customGridSize >= 5 && customGridSize <= 20 && customNumMines >= 1 && customNumMines < (customGridSize * customGridSize)) {
                        gridSize = customGridSize;
                        numMines = customNumMines;
                        difficulty = "Custom";
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid values entered. Using default settings.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid input. Using default settings.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            default:
                // No changes
                break;
        }
    }
}

class Minesweeper extends JFrame {
    private final int GRID_SIZE;
    private final int NUM_MINES;
    private final String difficulty;

    private Tile[][] grid;
    private JLabel timerLabel;
    private javax.swing.Timer timer;
    private int elapsedTime;
    private JPanel gridPanel;
    private boolean isPaused;
    private final ArrayList<ScoreEntry> scoreboard;

    public Minesweeper(ArrayList<ScoreEntry> scoreboard, int gridSize, int numMines, String difficulty) {
        this.scoreboard = scoreboard;
        this.GRID_SIZE = gridSize;
        this.NUM_MINES = numMines;
        this.difficulty = difficulty;

        setTitle("Minesweeper");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        elapsedTime = 0;
        isPaused = false;

        timerLabel = new JLabel("Time: 0 seconds  |  Press P to Pause", SwingConstants.CENTER);
        timerLabel.setFont(new Font("Arial", Font.BOLD, 16));
        add(timerLabel, BorderLayout.NORTH);

        gridPanel = new JPanel(new GridLayout(GRID_SIZE, GRID_SIZE));
        grid = new Tile[GRID_SIZE][GRID_SIZE];
        initializeGrid();
        placeMines();
        calculateNeighborCounts();

        add(gridPanel, BorderLayout.CENTER);

        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                adjustTileSizes();
            }
        });

        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_P) {
                    togglePause();
                }
            }
        });

        setFocusable(true);
        setFocusTraversalKeysEnabled(false);

        startTimer();

        setSize(600, 650);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initializeGrid() {
        for (int row = 0; row < GRID_SIZE; row++) {
            for (int col = 0; col < GRID_SIZE; col++) {
                Tile tile = new Tile(row, col);
                grid[row][col] = tile;
                gridPanel.add(tile);
            }
        }
    }

    private void placeMines() {
        Random random = new Random();
        int minesPlaced = 0;

        while (minesPlaced < NUM_MINES) {
            int row = random.nextInt(GRID_SIZE);
            int col = random.nextInt(GRID_SIZE);

            if (!grid[row][col].hasMine()) {
                grid[row][col].setMine(true);
                minesPlaced++;
            }
        }
    }

    private void calculateNeighborCounts() {
        for (int row = 0; row < GRID_SIZE; row++) {
            for (int col = 0; col < GRID_SIZE; col++) {
                if (!grid[row][col].hasMine()) {
                    int count = countNeighboringMines(row, col);
                    grid[row][col].setNeighborCount(count);
                }
            }
        }
    }

    private int countNeighboringMines(int row, int col) {
        int count = 0;
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                int r = row + i;
                int c = col + j;
                if (r >= 0 && r < GRID_SIZE && c >= 0 && c < GRID_SIZE && grid[r][c].hasMine()) {
                    count++;
                }
            }
        }
        return count;
    }

    private void resetGame() {
        timer.stop();
        elapsedTime = 0;
        timerLabel.setText("Time: 0 seconds  |  Press P to Pause");
        isPaused = false;

        getContentPane().removeAll();
        gridPanel = new JPanel(new GridLayout(GRID_SIZE, GRID_SIZE));
        grid = new Tile[GRID_SIZE][GRID_SIZE];
        initializeGrid();
        placeMines();
        calculateNeighborCounts();
        add(timerLabel, BorderLayout.NORTH);
        add(gridPanel, BorderLayout.CENTER);
        revalidate();
        repaint();

        startTimer();
    }

    private void startTimer() {
        timer = new javax.swing.Timer(1000, e -> {
            if (!isPaused) {
                elapsedTime++;
                timerLabel.setText("Time: " + elapsedTime + " seconds  |  Press P to Pause");
            }
        });
        timer.start();
    }

    private void togglePause() {
        isPaused = !isPaused;
        if (isPaused) {
            showPauseMenu();
        }
    }

    private void showPauseMenu() {
        String[] options = {"Resume", "Back to Main Menu"};
        int choice = JOptionPane.showOptionDialog(this, "Game Paused", "Pause Menu", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

        if (choice == 0) {
            isPaused = false;
            timer.start();
        } else if (choice == 1) {
            dispose();
            new StartMenu(); // Go back to main menu
        }
    }

    private boolean checkWinCondition() {
        for (int row = 0; row < GRID_SIZE; row++) {
            for (int col = 0; col < GRID_SIZE; col++) {
                Tile tile = grid[row][col];
                if (!tile.hasMine() && !tile.isRevealed()) {
                    return false;
                }
            }
        }
        return true;
    }

    private void adjustTileSizes() {
        int panelWidth = gridPanel.getWidth();
        int panelHeight = gridPanel.getHeight();
        int tileSize = Math.min(panelWidth / GRID_SIZE, panelHeight / GRID_SIZE);

        for (int row = 0; row < GRID_SIZE; row++) {
            for (int col = 0; col < GRID_SIZE; col++) {
                grid[row][col].setPreferredSize(new Dimension(tileSize, tileSize));
            }
        }
        gridPanel.revalidate();
    }

    class Tile extends JPanel {
        private final int row, col;
        private boolean hasMine;
        private boolean isRevealed;
        private boolean isFlagged;
        private int neighborCount;
        private final JLabel label;

        public Tile(int row, int col) {
            this.row = row;
            this.col = col;
            this.hasMine = false;
            this.isRevealed = false;
            this.isFlagged = false;
            this.label = new JLabel("", SwingConstants.CENTER);

            setLayout(new BorderLayout());
            add(label, BorderLayout.CENTER);

            setBorder(BorderFactory.createLineBorder(Color.GRAY));
            setBackground(Color.LIGHT_GRAY);

            addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    if (isPaused) return;
                    if (SwingUtilities.isLeftMouseButton(e)) {
                        if (isRevealed && neighborCount > 0) {
                            revealNeighborsIfFlaggedMatches();
                        } else {
                            reveal();
                        }
                    } else if (SwingUtilities.isRightMouseButton(e)) {
                        toggleFlag();
                    }
                }
            });
        }

        public boolean hasMine() {
            return hasMine;
        }

        public void setMine(boolean hasMine) {
            this.hasMine = hasMine;
        }

        public void setNeighborCount(int count) {
            this.neighborCount = count;
        }

        public boolean isRevealed() {
            return isRevealed;
        }

        private void reveal() {
            if (isRevealed || isFlagged) {
                return;
            }

            isRevealed = true;
            setBackground(Color.WHITE);

            if (hasMine) {
                setBackground(Color.RED);
                label.setText("M");
                timer.stop();
                int option = JOptionPane.showConfirmDialog(Minesweeper.this, "Game Over! Play again?", "Game Over", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    resetGame();
                } else {
                    dispose();
                    new StartMenu();
                }
            } else {
                label.setText(neighborCount == 0 ? "" : String.valueOf(neighborCount));
                if (neighborCount == 0) {
                    revealNeighbors();
                }
            }

            if (checkWinCondition()) {
                timer.stop();
                String message = "You win! Time: " + elapsedTime + " seconds.\n";
                int option = JOptionPane.showConfirmDialog(Minesweeper.this, message + "Enter your name:", "Congratulations!", JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.OK_OPTION) {
                    String name = JOptionPane.showInputDialog(Minesweeper.this, "Enter your name:");
                    if (name != null && !name.isEmpty()) {
                        if ("Normal".equals(difficulty)) {
                            StartMenu.addScore(scoreboard, name, elapsedTime);
                        }
                    }
                }
                resetGame();
            }
        }

        private void revealNeighborsIfFlaggedMatches() {
            int flaggedNeighbors = 0;
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    int r = row + i;
                    int c = col + j;
                    if (r >= 0 && r < GRID_SIZE && c >= 0 && c < GRID_SIZE && grid[r][c].isFlagged) {
                        flaggedNeighbors++;
                    }
                }
            }
            if (flaggedNeighbors == neighborCount) {
                for (int i = -1; i <= 1; i++) {
                    for (int j = -1; j <= 1; j++) {
                        int r = row + i;
                        int c = col + j;
                        if (r >= 0 && r < GRID_SIZE && c >= 0 && c < GRID_SIZE) {
                            grid[r][c].reveal();
                        }
                    }
                }
            }
        }

        private void revealNeighbors() {
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    int r = row + i;
                    int c = col + j;
                    if (r >= 0 && r < GRID_SIZE && c >= 0 && c < GRID_SIZE) {
                        grid[r][c].reveal();
                    }
                }
            }
        }

        private void toggleFlag() {
            if (isRevealed) {
                return;
            }

            isFlagged = !isFlagged;
            label.setText(isFlagged ? "F" : "");
            setBackground(isFlagged ? Color.YELLOW : Color.LIGHT_GRAY);
        }
    }
}
